#pragma once
/**
 * @file version.h
 * @brief Firmware version information.
 *   Generated by CMake from main ${CMAKE_SOURCE_DIR}/CMakeLists.txt
 */

#ifdef __cplusplus
extern "C" {
#endif

// clang-format off

#define FIRMWARE_VERSION_MAJOR    @VERSION_MAJOR@
#define FIRMWARE_VERSION_MINOR    @VERSION_MINOR@
#define FIRMWARE_VERSION_PATCH    @VERSION_PATCH@
#define FIRMWARE_VERSION_GIT_HASH "@VERSION_GIT_HASH@"
#define FIRMWARE_VERSION_STRING   "@VERSION_STRING@"

// clang-format on

#include <stdint.h>
#include <stdbool.h>

typedef struct {
    uint8_t major;
    uint8_t minor;
    uint8_t patch;
    char git_hash[9];
} version_t;

/**
 * @brief Parse a version string into a version_t struct
 *
 * @param [in] version_str Version string to parse
 * @param [out] version Version struct to fill
 * @return true if the version string was successfully parsed, false otherwise
 */
bool version_parse(const char *version_str, version_t *version);

/**
 * @brief Compare two version structs
 *
 * @param a First version struct
 * @param b Second version struct
 * @return -1 if a is older, 0 if they are the same, 1 if a is newer
 */
int version_compare(version_t *a, version_t *b);

/**
 * @brief Get the current firmware version as a version_t struct
 *
 * @return Current firmware version as a version_t struct
 */
version_t firmware_version();

/**
 * @brief Get the current firmware version
 *
 * @return Current firmware version
 */
const char *firmware_version_str();

/**
 * @brief Compare the current firmware version with a given version string
 *
 * @param version Version string to compare with
 * @return -1 if the current version is older, 0 if they are the same, 1 if the current version is newer
 */
int firmware_version_compare(const char *version);

#ifdef __cplusplus
}
#endif
